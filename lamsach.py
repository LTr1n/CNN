import os
import cv2
import hashlib
import numpy as np
from tqdm import tqdm

# Th∆∞ m·ª•c d·ªØ li·ªáu
train_dir = "train"  # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ƒë√∫ng
val_dir = "val"
test_dir = "test"
image_size = (128, 128)  # Chu·∫©n h√≥a k√≠ch th∆∞·ªõc ·∫£nh
valid_extensions = {".jpg", ".jpeg", ".png", ".bmp", ".tiff"}  # ƒê·ªãnh d·∫°ng ·∫£nh h·ª£p l·ªá

def get_image_hash(image):
    """T·∫°o hash t·ª´ d·ªØ li·ªáu ·∫£nh ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p."""
    return hashlib.md5(image.tobytes()).hexdigest()

def clean_images(directory):
    """L√†m s·∫°ch ·∫£nh trong th∆∞ m·ª•c ch·ªâ ƒë·ªãnh, bao g·ªìm ki·ªÉm tra tr√πng l·∫∑p."""
    hashes = set()
    
    for root, _, files in os.walk(directory):
        for file in tqdm(files, desc=f"Processing {directory}"):
            img_path = os.path.join(root, file)
            
            # B·ªè qua file kh√¥ng ph·∫£i ·∫£nh
            if not any(file.lower().endswith(ext) for ext in valid_extensions):
                print(f"‚ùå B·ªè qua file kh√¥ng ph·∫£i ·∫£nh: {img_path}")
                continue
            
            try:
                # ƒê·ªçc ·∫£nh b·∫±ng OpenCV
                img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)
                if img is None:
                    print(f"‚ùå ·∫¢nh h·ªèng, x√≥a: {img_path}")
                    os.remove(img_path)
                    continue
                
                # Ki·ªÉm tra s·ªë k√™nh ·∫£nh (chuy·ªÉn v·ªÅ RGB n·∫øu c√≥ k√™nh alpha)
                if len(img.shape) == 2:  # ·∫¢nh grayscale
                    img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
                elif img.shape[2] == 4:  # ·∫¢nh RGBA
                    img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
                
                # Ki·ªÉm tra k√≠ch th∆∞·ªõc ·∫£nh
                height, width, _ = img.shape
                if height < 32 or width < 32:  # Lo·∫°i b·ªè ·∫£nh qu√° nh·ªè
                    print(f"‚ö†Ô∏è ·∫¢nh qu√° nh·ªè, x√≥a: {img_path}")
                    os.remove(img_path)
                    continue
                
                # Ki·ªÉm tra ·∫£nh tr√πng l·∫∑p
                img_hash = get_image_hash(img)
                if img_hash in hashes:
                    print(f"üîÑ ·∫¢nh tr√πng l·∫∑p, x√≥a: {img_path}")
                    os.remove(img_path)
                    continue
                hashes.add(img_hash)
                
                # Chu·∫©n h√≥a k√≠ch th∆∞·ªõc b·∫±ng OpenCV
                img_resized = cv2.resize(img, image_size, interpolation=cv2.INTER_AREA)
                cv2.imwrite(img_path, img_resized)
            
            except Exception as e:
                print(f"‚ùå L·ªói v·ªõi ·∫£nh {img_path}: {e}")
                os.remove(img_path)

# Ch·∫°y l√†m s·∫°ch cho c·∫£ train & val
clean_images(train_dir)
clean_images(val_dir)
clean_images(test_dir)
print("‚úÖ Xong!")
